#!/usr/bin/env python
# encoding: utf-8
"""
nimbuskit

Copyright 2011-2014 NimbusKit

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import logging
import re
import os
import shutil
import string
import sys
from optparse import OptionParser

features = [
	"AttributedLabel",
	"Basics",
	"CoreDataCoding",
	"Currencies"
]

def status():
	cwd = os.getcwd()
	for feature in features:
		foldername=string.lower(feature)
		featurefolder="features/"+foldername

		logging.info("Checking " + feature)
		os.chdir(featurefolder)
		f=os.popen("git status")
		output = string.join(f.readlines(), "")
		match = re.search('nothing to commit', output)
		if not match:
			print "Status of " + feature
			print output
		os.chdir(cwd)

def commit(message):
	cwd = os.getcwd()
	for feature in features:
		foldername=string.lower(feature)
		featurefolder="features/"+foldername

		os.chdir(featurefolder)

		logging.info("Checking " + feature)
		f=os.popen("git status")
		output = string.join(f.readlines(), "")
		match = re.search('nothing to commit', output)
		if not match:
			os.system("git add .")
			if message:
				os.system("git commit -a -m \"" + message + "\"")
			else:
				os.system("git commit -a")

		os.chdir(cwd)

def push():
	cwd = os.getcwd()
	for feature in features:
		foldername=string.lower(feature)
		featurefolder="features/"+foldername

		os.chdir(featurefolder)

		logging.info("Pushing " + feature)
		os.system("git push origin master")

		os.chdir(cwd)

# In order to support features having their own README files on Github while also defining Doxygen
# groups we do some preprocessing of each feature's README before adding them to a shared .docsbuild
# directory. We tell Doxygen to parse this directory in our Doxyfile.
def gendocs():
	cwd = os.getcwd()

	if not os.path.exists('.docsbuild'):
		os.makedirs('.docsbuild')

	for feature in features:
		foldername=string.lower(feature)
		featurefolder="features/"+foldername

		src = featurefolder+"/README.md"
		dst = ".docsbuild/"+foldername+"README.md"
		if os.path.exists(src):
			code_block_open = False
			with open(src, 'r') as src_file:
				src_lines = src_file.readlines()
				dst_file = open(dst, "w")
				dst_file.write("/**\n")

				prevline = None
				for line in src_lines:
					if line.startswith("<!--dox ") and line.endswith("-->\n"):
						line = line.replace("<!--dox ", "").replace("-->", "")
					elif line.startswith("=="):
						line = line.replace("=", "-")
					elif line.startswith("--"):
						prevline = '### '+prevline
						line = ''
					elif line.startswith("```"):
						if code_block_open:
							line = "@endcode\n"
						else:
							line = "@code\n"
						code_block_open = not code_block_open
					if line.startswith("![](https://github.com/NimbusKit/Catalog/raw/master/docs/gfx/"):
						line = line.replace("![](https://github.com/NimbusKit/Catalog/raw/master/docs/gfx/", "@image html ").replace(")\n", "\n")
					if prevline:
						dst_file.write(prevline)
					prevline = line
				if prevline:
					dst_file.write(prevline)
				dst_file.write("\n */\n")
				dst_file.close()
				src_file.close()

	shutil.copyfile("docs/Doxyfile", "docs/.Doxyfile.tmp")

	doxyfile = open("docs/.Doxyfile.tmp", "a")

	doxyfile.write("\nINPUT = \\")
	for feature in features:
		foldername=string.lower(feature)
		doxyfile.write("\n features/"+foldername+"/src \\")
	doxyfile.write("\n .docsbuild")

	doxyfile.write("\n\nEXCLUDE = ")
	for feature in features:
		foldername=string.lower(feature)
		if foldername != 'basics':
			doxyfile.write(" \\\n features/"+foldername+"/src/NimbusKitBasics.h")

	doxyfile.write("\n\nIMAGE_PATH = \\")
	for feature in features:
		foldername=string.lower(feature)
		doxyfile.write("\n features/"+foldername+"/docs/gfx \\")
	doxyfile.write("\n docs/gfx/")

	doxyfile.close()

	os.system("doxygen docs/.Doxyfile.tmp")

	shutil.rmtree('.docsbuild')
	os.remove('docs/.Doxyfile.tmp')


def main():
	usage = '''%prog [options] command(s)

EXAMPLES:

    Status of all features:
    > %prog status

    git add .;git commit -a for all features:
    > %prog commit

    git push origin master for all features:
    > %prog push

    Generates all documentation:
    > %prog gendocs'''
	parser = OptionParser(usage = usage)

	parser.add_option("-m", "--message", dest="message",
	                  help="Commit all features with the given message")

	parser.add_option("-v", "--verbose", dest="verbose",
	                  help="Display verbose output",
	                  action="store_true")

	(options, args) = parser.parse_args()

	if options.verbose:
		log_level = logging.INFO
	else:
		log_level = logging.WARNING

	logging.basicConfig(level=log_level)

	did_anything = False
	for command in args:
		if command == 'status':
			status()
			did_anything = True
		elif command == 'commit':
			commit(options.message)
			did_anything = True
		elif command == 'push':
			push()
			did_anything = True
		elif command == 'gendocs':
			gendocs()
			did_anything = True

	if not did_anything:
		parser.print_help()

if __name__ == "__main__":
	sys.exit(main())

#

